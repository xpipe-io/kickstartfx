import java.util.stream.Collectors

def distDir = "${project.layout.buildDirectory.get()}/dist"

tasks.register('licenses', DefaultTask) {
    doLast {
        copy {
            from "$projectDir/licenses/"
            into "$distDir/licenses/"
            include '*.license'
            rename { String name ->
                name.replace("license", "txt")
            }
        }
    }
}

def debugArguments = file("$projectDir/debug/debug_arguments.txt").text.lines()
        .map(s -> '"' + groupName + '.' + artifactName + '.' + s + '"')
        .collect(Collectors.joining(' '))

if (os.isWindows()) {
    tasks.register('baseDist', DefaultTask) {
        doLast {
            copy {
                from "$distDir/jpackage/${jpackageExecutableName}"
                into "$distDir/base"
            }
            copy {
                from "$projectDir/logo/logo.ico"
                into "$distDir/base"
            }
            copy {
                from "$projectDir/fonts"
                into "$distDir/base/fonts"
            }
            copy {
                from "$rootDir/lang"
                into "$distDir/base/lang"
            }

            file("$distDir/base/app/.jpackage.xml").delete()

            def batLauncherFile = file("$distDir/base/runtime/bin/${jpackageExecutableName}.bat")
            def batLauncherContent = batLauncherFile.text
            batLauncherContent = batLauncherContent.replace(" -p \"%~dp0/../app\"", "")
            batLauncherFile.text = batLauncherContent
            file("$distDir/base/runtime/bin/${jpackageExecutableName}").delete()

            def debugSource = replaceVariablesInFile("$projectDir/debug/windows/debug.bat", Map.of(
                    '__JVM_ARGS__', debugArguments,
                    '__EXECUTABLE_NAME__', jpackageExecutableName
            ))

            file("$distDir/base/scripts").mkdirs()
            def debugTarget = file("$distDir/base/scripts/${jpackageExecutableName}_debug.bat")
            debugTarget.text = debugSource.text

            copy {
                from "$distDir/licenses"
                into "$distDir/base/licenses"
            }

            file("$distDir/base/${jpackageExecutableName}.exe").writable = true
            providers.exec {
                commandLine "$projectDir\\tools\\sign.bat", "$distDir/base/${jpackageExecutableName}.exe"
                ignoreExitValue = !ci
            }.getResult().get()
            file("$distDir/base/${jpackageExecutableName}.exe").writable = false
        }
    }
} else if (os.isLinux()) {
    tasks.register('baseDist', DefaultTask) {
        doLast {
            copy {
                from "$distDir/jpackage/${jpackageExecutableName}"
                into "$distDir/base/"
            }
            copy {
                from "$projectDir/logo/logo.png"
                into "$distDir/base/"
            }
            copy {
                from "$projectDir/fonts"
                into "$distDir/base/fonts"
            }
            copy {
                from "$rootDir/lang"
                into "$distDir/base/lang"
            }

            def shLauncherFile = file("$distDir/base/lib/runtime/bin/${jpackageExecutableName}")
            def shLauncherContent = shLauncherFile.text
            shLauncherContent = shLauncherContent.replace(" -p \"\$DIR/../app\"", "")
            shLauncherFile.text = shLauncherContent
            file("$distDir/base/lib/runtime/bin/${jpackageExecutableName}.bat").delete()

            def debugSource = replaceVariablesInFile("$projectDir/debug/linux/debug.sh", Map.of(
                    '__JVM_ARGS__', debugArguments,
                    '__EXECUTABLE_NAME__', jpackageExecutableName
            ))

            file("$distDir/base/scripts").mkdirs()
            def debugTarget = file("$distDir/base/scripts/${jpackageExecutableName}_debug.sh")
            debugTarget.text = debugSource.text
            debugTarget.setExecutable(true, false)

            copy {
                from "$distDir/licenses"
                into "$distDir/base/licenses"
            }
        }
    }
} else {
    tasks.register('baseDist', DefaultTask) {
        doLast {
            def app = "${productName}.app"
            copy {
                from "$distDir/jpackage/${jpackageExecutableName}.app/Contents"
                into "$distDir/$app/Contents/"
            }
            copy {
                from "$distDir/licenses"
                into "$distDir/$app/Contents/Resources/licenses"
            }
            copy {
                from "$projectDir/fonts"
                into "$distDir/$app/Contents/Resources/fonts"
            }
            copy {
                from "$rootDir/lang"
                into "$distDir/$app/Contents/Resources/lang"
            }

            def shLauncherFile = file("$distDir/$app/Contents/runtime/Contents/Home/bin/${jpackageExecutableName}")
            def shLauncherContent = shLauncherFile.text
            shLauncherContent = shLauncherContent.replace(" -p \"\$DIR/../app\"", "")
            shLauncherFile.text = shLauncherContent
            file("$distDir/$app/Contents/runtime/Contents/Home/bin/${jpackageExecutableName}.bat").delete()


            def debugSource = replaceVariablesInFile("$projectDir/debug/mac/debug.sh", Map.of(
                    '__JVM_ARGS__', debugArguments,
                    '__EXECUTABLE_NAME__', jpackageExecutableName
            ))

            file("$distDir/$app/Contents/Resources/scripts").mkdirs()
            def debugTarget = file("$distDir/$app/Contents/Resources/scripts/${jpackageExecutableName}_debug.sh")
            debugTarget.text = debugSource.text
            debugTarget.setExecutable(true, false)

            copy {
                from "$projectDir/pkg/scripts/uninstall.sh"
                into "$distDir/$app/Contents/Resources/scripts/"
            }
            file("$distDir/$app/Contents/Resources/scripts/uninstall.sh").text = file("$distDir/$app/Contents/Resources/scripts/uninstall.sh").text
                    .replaceAll("__PRODUCT__", productName)
                    .replaceAll("__PRODUCT_KEBAP__", kebapProductName)
                    .replaceAll("__VERSION__", versionString)
                    .replaceAll("__PACKAGE_ID__", groupName + "." + kebapProductName)
        }
    }

    tasks.register('notarize', Exec) {
        mustRunAfter trainAot
        commandLine "$projectDir/mac_app/notarize_app.sh", "$projectDir", arch.toString(), productName
    }
    if (System.getenv("MACOS_DEVELOPER_ID_APPLICATION_CERTIFICATE_NAME") != null) {
        finishBaseDist.finalizedBy(notarize)
    }
}

baseDist.dependsOn(licenses)
baseDist.dependsOn(jpackage)
dist.dependsOn(baseDist)

if (bundleCds) {
    baseDist.finalizedBy(trainAot)
}
